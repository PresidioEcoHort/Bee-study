crs(sjer_roads)
# Yes! their CRS's  match now.
# plot point data using ggplot
ggplot(sjer_plots) +
stat_sf_coordinates() +
labs(title = "Plot locations")
# Now, going to combine the roads (lines), and points (study plot) locations onto one map
# plot lines and points together
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)
+ coord_sf(). Run ??coord_sf()
Run ??coord_sf()
??coord_sf()
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
# Then adding black border (tip from Alice)
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))+
+geom_sf(data=sjer_aoi,fill=NA)
# import madera county roads map
sjer_roads1 <- read_sf("spatial/california/madera-county-roads/tl_2013_06039_roads.shp")
# import madera county roads map
sjer_roads <- read_sf("spatial/california/madera-county-roads/tl_2013_06039_roads.shp")
# they don't have the same CRS, so I am thinking next line of code makes them match?...
sjer_plots <- st_transform(sjer_plots, crs(sjer_roads))
View(sjer_roads)
# plot the lines data, this time using MTFCC as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(MTFCC))) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the MTFCC attribute")
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
library(tidyverse)
library(openintro)
# load libraries
library(raster)
library(sf)
library(ggplot2)
# Insert code for Exercise 1 here
# open raster data
lidar_dem <- raster(x = "spatial/BLDR_LeeHill/pre-flood/lidar/pre_DTM.tif")
# plot raster data
plot(lidar_dem,
main = "Digital Elevation Model - Pre 2013 Flood")
# zoom in to one region of the raster
plot(lidar_dem,
xlim = c(473000, 473030), # define the x limits
ylim = c(4434000, 4434030), # define y limits for the plot
main = "Lidar Raster - Zoomed into one small region")
# view resolution units
crs(lidar_dem)
## CRS arguments:
##  +proj=utm +zone=13 +datum=WGS84 +units=m +no_defs +ellps=WGS84
## +towgs84=0,0,0
# assign crs to an object (class) to use for reprojection and other tasks
myCRS <- crs(lidar_dem)
myCRS
## CRS arguments:
##  +proj=utm +zone=13 +datum=WGS84 +units=m +no_defs +ellps=WGS84
## +towgs84=0,0,0
# what is the x and y resolution for your raster data?
xres(lidar_dem)
## [1] 1
yres(lidar_dem)
# What unit?
crs(lidar_dem)
## [1] 1
# plot raster data
plot(lidar_dem,
main = "Digital Elevation Model - Pre 2013 Flood")
# plot histogram
hist(lidar_dem,
main = "Distribution of surface elevation values",
xlab = "Elevation (meters)", ylab = "Frequency",
col = "springgreen")
# plotting but now changing breaks
hist(lidar_dem,
main = "Distribution of surface elevation values",
xlab = "Elevation (meters)", ylab = "Frequency",
col = "springgreen", breaks = c(1600, 1800, 2000, 2100))
# Import a polygon shapefile: read_sf("path","fileName")
sjer_plot_locations <- read_sf(dsn = "spatial/california/SJER/vector_data",
"SJER_plot_centroids")
# view just the class for the shapefile
class(sjer_plot_locations)
# view just the crs for the shapefile
crs(sjer_plot_locations)
# view just the extent for the shapefile
extent(sjer_plot_locations)
# view all metadata at same time
sjer_plot_locations
#You view the attributes of a SpatialPointsDataFrame using objectName@data (e.g., sjer_plot_locations@data).
#sjer_plot_locations@data
#Hmm, above command did not work.  Let me try...
sjer_plot_locations
# create a plot of the shapefile
# 'pch' sets the symbol
# 'col' sets point symbol color
plot(sjer_plot_locations$geometry, col = "blue",
pch = 8)
#title("SJER Plot Locations\nMadera County, CA")
# getting error in line 143, come back to it.
# turn off axis elements in ggplot for better visual comparison
newTheme <- list(theme(line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(), # turn off ticks
axis.title.x = element_blank(), # turn off titles
axis.title.y = element_blank(),
legend.position = "none")) # turn off legend
# read shapefile
worldBound <- read_sf(dsn = "spatial/global/ne_110m_land/ne_110m_land.shp")
# note: to get line 158 to work, needed to put spatial/ in front of global
# plot map using ggplot
worldMap <- ggplot(worldBound) +
geom_sf(fill = "black") +
labs(x = "Longitude (Degrees)",
y = "Latitude (Degrees)",
title = "Global Map - Geographic Coordinate System",
subtitle = "WGS84 Datum, Units: Degrees - Latitude / Longitude")
worldMap
# define locations of Boulder, CO, Mallorca, Spain and  Oslo, Norway
# store coordinates in a data.frame
loc_df <- data.frame(lon = c(-105.2519, 10.7500, 2.9833),
lat = c(40.0274, 59.9500, 39.6167))
# add a point to the map
mapLocations <- worldMap +
geom_point(data = loc_df,
aes(x = lon, y = lat, group = NULL), colour = "springgreen",
size = 5)
mapLocations
library(broom)
library(RColorBrewer)
library(dplyr)
# to add a north arrow and a scale bar to the map
# set factors to false
options(stringsAsFactors = FALSE)
# Now I will import and explore data
# import roads
sjer_roads <- read_sf("spatial/california/madera-county-roads/tl_2013_06039_roads.shp")
# view the original class of the TYPE column
class(sjer_roads$RTTYP)
unique(sjer_roads$RTTYP)
# quick plot using base plot
plot(sjer_roads,
main = "Quick plot of roads data")
# Going to plot NA's as Unknown...
# set all NA values to "unknown" so they still plot
sjer_roads$RTTYP[is.na(sjer_roads$RTTYP)] <- "Unknown"
unique(sjer_roads$RTTYP)
# Now will plot using ggplot
# plot the lines data
ggplot() +
geom_sf(data = sjer_roads) +
labs(title = "ggplot map of roads")
# Now going to tell R to color the lines by their RTTYP category (which I am telling R are factors, temporarily)
# plot the lines data
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the RTTP attribute")
# view the original class of the TYPE column
class(sjer_roads$RTTYP)
unique(sjer_roads$RTTYP)
# quick plot using base plot
plot(sjer_roads,
main = "Quick plot of roads data")
# Going to plot NA's as Unknown...
# set all NA values to "unknown" so they still plot
sjer_roads$RTTYP[is.na(sjer_roads$RTTYP)] <- "Unknown"
unique(sjer_roads$RTTYP)
# Now will plot using ggplot
# plot the lines data
ggplot() +
geom_sf(data = sjer_roads) +
labs(title = "ggplot map of roads")
# Now going to tell R to color the lines by their RTTYP category (which I am telling R are factors, temporarily)
# plot the lines data
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the RTTP attribute")
# import points layer
sjer_plots <- read_sf("spatial/california/SJER/vector_data",
"SJER_plot_centroids")
# given you want to plot 2 layers together, let's check the crs before going any further
crs(sjer_plots)
crs(sjer_roads)
# they don't have the same CRS, so I am thinking next line of code makes them match?...
sjer_plots <- st_transform(sjer_plots, crs(sjer_roads))
# I will check if line 253 made them match:
crs(sjer_plots)
crs(sjer_roads)
# Yes! their CRS's  match now.
# plot point data using ggplot
ggplot(sjer_plots) +
stat_sf_coordinates() +
labs(title = "Plot locations")
# Now, going to combine the roads (lines), and points (study plot) locations onto one map
# plot lines and points together
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)
# Want to zoom into my plots using help from Giusi
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
# Thank you Giusi for tip!
View(sjer_roads)
??geom_sf()
# plot the lines data, this time using MTFCC as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(MTFCC), linewidth = MTFCC)) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the MTFCC attribute")
# plot the lines data,  using RTYCC as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTYCC), linewidth = RTYCC)) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the MTFCC attribute")
title = "Roads colored by the MTFCC attribute")
View(sjer_roads)
title = "Roads colored by the MTFCC attribute")
# plot the lines data
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the RTTP attribute")
title = "Roads colored by the MTFCC attribute")
# plot the lines data,  using RTTYP as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, color = "grey") +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
# plot the lines data,  using RTTYP as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, color = factor(RTTYP)) +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
View(sjer_roads)
# using below code as a guide
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(color = 'Road Types', # change the legend type
title = "Roads colored by the RTTP attribute")
# plot the lines data,  using RTTYP as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots)+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
View(sjer_plots)
# plot the lines data,  using RTTYP as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots, aes(symbols = factor(plot_type)))+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
# plot the lines data,  using RTTYP as the factor by which they get colored
ggplot() +
geom_sf(data = sjer_roads, aes(color = factor(RTTYP))) +
labs(title = "ggplot map of roads") +
stat_sf_coordinates(data = sjer_plots, aes(pch = factor(plot_type)))+
coord_sf(xlim = c(-119.77, -119.71), ylim = c(37.08, 37.13))
remotes::install_github("jenna-tb-ekwealor/BIOL710AdvBiometry")
learnr::run_tutorial("PreLab_Week11", "BIOL710AdvBiometry")
library(tidyverse)
library(openintro)
packages <- c("rotl", "ape", "devtools", "stringr")
install.packages(packages)
devtools::install_github("phylotastic/datelife")
devtools::install_github("phylotastic/datelifeplot")
library(rotl)
library(stringr)
library(datelife)
library(datelifeplot)
library(tidyverse)
library(phytools)
#Now want to register which package versions we are using for reproducibility
packageVersion("rotl")
install.packages(packages)
packageVersion("ape")
packageVersion("devtools")
packageVersion("stringi")
packageVersion("datelife")
packageVersion("datelifeplot")
packageVersion("phytools")
#Alternatively, can get all package versions this way
packages <- c("rotl", "ape", "devtools", "stringr", "datelife", "datelifeplot")
names(packages) <- packages
lapply(packages, packageVersion)
# Also, document what R version using, and what packages already installed
sessionInfo()
resolved_name <- rotl::tnrs_match_names(names = "amphibian")
resolved_name
# looking at class?
class(resolved_name)
resolved_name <- rotl::tnrs_match_names(names = "amphibian")
resolved_name
# looking at class?
class(resolved_name)
my_taxa <- c("amphibians", "felis", "canis, "delphinidae", "aves", "primates")
my_taxa <- c("amphibian", "felis", "canis, "delphinidae", "aves", "primates")
my_taxa <- c("amphibian", "felis", "canis", "delphinidae", "aves", "primates")
resolved_names <- rotl::tnrs_match_names(names = my_taxa, context_name = "All life")
resolved_names
View(resolved_names)
resolved_names$unique_name
View(resolved_names)
my_ott_ids <- resolved_names$ott_id
my_ott_ids
# Just want to look at Delphinidae
rotl::inspect(resolved_names, taxon_name = "Delphinidae")
View(resolved_names)
View(resolved_names)
# filtering femurs by femur length > 10mm
# femurs_10mm <- filter(femurs, Femur>10)
# Using above code as model for extracting Delphinidae row
justDelphinidae <- select(resolved_names, unique_name == "Delphinidae")
my_Delphins <- filter(resolved_names, unique_names == "Delphinidae")
learnr::run_tutorial("PreLab_Week12", "BIOL710AdvBiometry")
(learnr::run_tutorial("PreLab_Week13", "BIOL710AdvBiometry")
learnr::run_tutorial("PreLab_Week13", "BIOL710AdvBiometry"
update()
learnr::run_tutorial("PreLab_Week13", "BIOL710AdvBiometry")
library(tidyverse)
library(openintro)
packages <- c("stats", "ade4", "ape", "adegenet", "phangorn", "RevGadgets", "ggtree")
install.packages(packages)
library(adegenet)
library(phangorn)
library(stats)
library(ade4)
library(ape)
library(adegenet)
library(phangorn)
library(RevGadgets)
library(ggtree)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
# read in data
dna <- adegenet::fasta2DNAbin(file="flu.fasta")
dna
#read in annotations
annot <- read.csv("annot.csv", header=TRUE, row.names=1)
dna
packages
#Calculate distances between flu strains using Tamura and Nei 1993, which does not assume equal rates for all bases, nor in different regions of the gene
D <- ape::dist.dna(dna, model = "TN93")
# of sequences we have is 80
n <- 80
# number of pairwise sequences
n*(n-1)/2
#First, we convert the data into a matrix, then into a dataframe
D_df <- as.data.frame(as.matrix(D))
table.paint(D_df, cleg=0, clabel.row=.5, clabel.col=.5)
# make a neighbor-joining tree using ape package
tre <- ape::nj(D)
tre
class(tre)
# "ladderize" the tree, by length
tre <- ape::ladderize(tre, right = F)
#plot the tree
plot(tre, cex = 0.6)
plot.new()
#title("A Simple NJ Tree")
#getting error message for line 81, moving on for now
# Now goint to use different method to assemble tree:UPGMA
h_cluster <- hclust(D, method = "average", members = NULL)
plot(h_cluster, cex = 0.6)
# first will try fast.me
# make a neighbor-joining tree using ape package
tre2 <- ape::fastme.bal(D)
tre2
class(tre2)
# "ladderize" the tree, by length
tre2 <- ape::ladderize(tre2, right = F)
#plot the tree
plot(tre2, cex = 0.6)
plot.new()
#title("A Simple NJ Tree")
#getting error message for line 81, moving on for now
# first will try fast.me
# make a neighbor-joining tree using ape package
tre2 <- ape::fastme.bal(D)
tre2
class(tre2)
# "ladderize" the tree, by length
tre2 <- ape::ladderize(tre2, right = F)
#plot the tree
plot(tre2, cex = 0.6)
plot.new()
#title("A Simple NJ Tree")
#getting error message for line 81, moving on for now
tre3 <- stats::hclust(D)
tre3
class(tre3)
tre3 <- ape::ladderize(tre2, right = F)
#plot the tree
plot(tre3, cex = 0.6)
plot.new()
plot(tre, show.tip = FALSE)
title("Unrooted NJ tree")
#title("Unrooted NJ tree")
#Error in title("Unrooted NJ tree") : plot.new has not been called yet
# define a color ramp
myPal <- colorRampPalette(c("red","yellow","green","blue"))
tiplabels(annot$year, bg = num2col(annot$year, col.pal = myPal), cex=.5)
#title("Unrooted NJ tree")
#Error in title("Unrooted NJ tree") : plot.new has not been called yet
# define a color ramp
# Let me try this to deal with error:
plot.net(tre,show.tip = FALSE)
#title("Unrooted NJ tree")
#Error in title("Unrooted NJ tree") : plot.new has not been called yet
# define a color ramp
# Let me try this to deal with error:
plot.new(tre,show.tip = FALSE)
tiplabels(annot$year, bg = num2col(annot$year, col.pal = myPal), cex=.5)
plot.new()
tiplabels(annot$year, bg = num2col(annot$year, col.pal = myPal), cex=.5)
#tiplabels(annot$year, bg = num2col(annot$year, col.pal = myPal), cex=.5)
#Getting same error message "plot.new has not been called yet
# set the boundaries between colors
breaks <- pretty(1993:2008, 5)
legend("bottomright", fill = num2col(breaks, col.pal = myPal), leg = breaks, ncol = 2)
plot(tre, show.tip = FALSE)
# Let me try this to deal with error:
#plot.new(tre,show.tip = FALSE) # nope, this did not work either
# let me try frame() as the "alias" of plot.new
frame()
# define a color ramp
myPal <- colorRampPalette(c("red","yellow","green","blue"))
#tiplabels(annot$year, bg = num2col(annot$year, col.pal = myPal), cex=.5)
#Getting same error message "plot.new has not been called yet
# set the boundaries between colors
breaks <- pretty(1993:2008, 5)
legend("bottomright", fill = num2col(breaks, col.pal = myPal), leg = breaks, ncol = 2)
#got error message when tried to run next line, so let me try using alias frame()
frame()
legend("bottomright", fill = num2col(breaks, col.pal = myPal), leg = breaks, ncol = 2)
plot.new()
legend("bottomright", fill = num2col(breaks, col.pal = myPal), leg = breaks, ncol = 2)
learnr::run_tutorial("PreLab_Week5", "BIOL710AdvBiometry")
learnr::run_tutorial("PreLab_Week7", "BIOL710AdvBiometry")
learnr::run_tutorial("PreLab_Week7", "BIOL710AdvBiometry")
learnr::run_tutorial("PreLab_Week8", "BIOL710AdvBiometry")
library(tidyverse)
library(openintro)
library(ggplot2)
library(dplyr)
# Read in the bee observation data
Bees2023 <- read.csv("C:/Users/dgamoso/OneDrive - The Presidio Trust/Diony's Stuff/Graduate school/Presidio Ecological Horticulture Project/Bee-study/Data/EcohortFieldMethodsData2023ForAnalysis.csv")
setwd("C:/Users/dgamoso/OneDrive - The Presidio Trust/Diony's Stuff/Graduate school/Presidio Ecological Horticulture Project/Bee-study")
library(tidyverse)
library(openintro)
library(ggplot2)
library(dplyr)
# Read in the bee observation data
Bees2023 <- read.csv("C:/Users/dgamoso/OneDrive - The Presidio Trust/Diony's Stuff/Graduate school/Presidio Ecological Horticulture Project/Bee-study/Data/EcohortFieldMethodsData2023ForAnalysis.csv")
library(tidyverse)
library(openintro)
library(ggplot2)
library(dplyr)
# Read in the bee observation data
Bees2023 <- read.csv("C:/Users/dgamoso/OneDrive - The Presidio Trust/Diony's Stuff/Graduate school/Presidio Ecological Horticulture Project/Bee-study/Data/GitEcohortFieldMethodsData2023ForAnalysis.csv")
# Next, create a new data frame where both Host and Non-host treatments are clumped under "Augmented" (with native flowers), and Control plots are called "Unaugmented)
Bees2023Augmented <- Bees2023 %>% dplyr::mutate(Augmentation = case_when(Treatment == "C" ~ "NoExtraFlowers", Treatment == "NH" ~ "NativeFlowersAdded", Treatment == "H" ~ "NativeFlowersAdded" ))
# let me just group by DateBlkTrtmnt these 4 categories
DBT_groups<-group_by(Bees2023Augmented,DateBlkTrtmnt, Augmentation, Block)
# Next, I want to get a total count of observed or netted bees per group, our groups being DateBlkTrtmnts.  I will create a new column called SumsOfCount
Sums_counts_DBT <-summarize(DBT_groups, SumsOfCounts = sum (Count))
#getting rid of the NA
rowsnotNA <- which(!is.na(Sums_counts_DBT$Augmentation))
Sums_counts_DBT<-Sums_counts_DBT[rowsnotNA,]
#What is the mean of each treatment?
means_AugVsUnaug <-aggregate(SumsOfCounts~Augmentation, Sums_counts_DBT, mean)
means_AugVsUnaug
plot_means_all_pollinators<- ggplot(data = Sums_counts_DBT, aes (x = Augmentation, y = SumsOfCounts, fill = Augmentation)) +
geom_boxplot()+
labs(x = "Added Native Wildflowers?", y="Mean/Median Pollinatorcounts", title = "Does adding wildflowers make a difference?", caption =  "Shows median and mean of pollinator counts per sampling event. We compare  Augmented (plots with native wildflowers added), and Unaugmented (control) plots")+
stat_summary(fun.y="mean",color="red", shape=13)
plot_means_all_pollinators
#If I want to look at all blocks...
plots_all_blocks<-ggplot(data = Sums_counts_DBT, aes (x = Augmentation, y = SumsOfCounts, fill = Augmentation)) +
geom_boxplot()+
labs(x = "Added Native Wildflowers?", y="Mean/Median Pollinatorcounts", title = "Does adding wildflowers make a difference, by Block?", caption =  "Shows median and mean of pollinator counts per sampling event. We compare  Augmented (plots with native wildflowers added), and Unaugmented (control) plots")+
stat_summary(fun.y="mean",color="red", shape=13)+
facet_wrap(~Block)
plots_all_blocks
# ANOVA
anova_augmentation <- aov(SumsOfCounts ~ Augmentation + Block, data= Sums_counts_DBT)
summary(anova_augmentation)
??save
